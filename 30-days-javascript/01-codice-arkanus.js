// Enunciado 

// üßô El c√≥dice de Arkanus
// Naira, una aprendiz de hechicera, ha encontrado un antiguo c√≥dice en las ruinas de Arkanus. Este c√≥dice est√° lleno de s√≠mbolos arcanos que, seg√∫n los manuscritos, ocultan un poderoso conjuro olvidado. Para descifrar el conjuro, debe interpretar correctamente los s√≠mbolos seg√∫n un antiguo sistema num√©rico m√°gico.

// Estos son los s√≠mbolos conocidos y sus equivalencias:

// S√≠mbolo	Valor
// ‚òΩ	1
// ‚òæ	5
// ‚ôÅ	10
// ‚öï	50
// ‚ö°	100
// Pero cuidado: la energ√≠a m√°gica es caprichosa. Si un s√≠mbolo de menor valor aparece justo antes que uno de mayor valor, su energ√≠a se resta en lugar de sumarse.

// Debes crear una funci√≥n que reciba una cadena con los s√≠mbolos y retorne su valor num√©rico total. Si encuentras un s√≠mbolo desconocido, el conjuro se corrompe, y la funci√≥n debe devolver NaN.

// Convierte n√∫meros a letras seg√∫n:
// decodeSpell('‚òΩ‚òΩ‚òΩ') // 3
// decodeSpell('‚òΩ‚òæ') // 4 (5 - 1)
// decodeSpell('‚òæ‚òΩ') // 6 (5 + 1)
// decodeSpell('‚òæ‚òΩ‚òΩ‚òΩ') // 8 (5 + 3)
// decodeSpell('‚òΩ‚òΩ‚òΩ‚ö°') // 101 (1 + 1 + (100 - 1))
// decodeSpell('‚òΩ‚öï') // 49 (50 - 1)
// decodeSpell('‚òΩ‚òΩ‚òæ') // 5 (1 + (5 - 1))
// decodeSpell('‚òΩ‚òΩ‚òæ‚ö°') // 95 (1 + (-1 + (100 - 5)))
// decodeSpell('‚òΩ‚öï‚ö°') // 49 (-1 - 50 + 100)
// decodeSpell('‚ö°‚ö°‚ö°') // 300
// decodeSpell('‚öï‚ö°') // 50
// decodeSpell('‚öï.‚ôí') // NaN

function decodeSpell(spell) {
  // Creamos un mapa de s√≠mbolos
  const symbolMap = {
    '‚òΩ': 1,
    '‚òæ': 5,
    '‚ôÅ': 10,
    '‚öï': 50,
    '‚ö°': 100,
  };

  // Inicializamos variables
  let total = 0;
  let i = 0;

  // Recorremos la cadena
  while (i < spell.length) {
    // Obtenemos el valor actual y el siguiente
    const current = symbolMap[spell[i]];
    const next = symbolMap[spell[i + 1]];

    // Si el valor actual es undefined, retornamos NaN
    if (current === undefined) return NaN;

    // Regla de resta si el siguiente es mayor
    if (next !== undefined && current < next) {
      total += next - current;
      i += 2;
    } else {
      total += current;
      i += 1;
    }
  }

  return total;
}
